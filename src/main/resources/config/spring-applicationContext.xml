<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:content="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
                        http://www.springframework.org/schema/tx
                        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置数据源-->
    <import resource="spring-dataSource.xml" />
    <!--配置shiro框架的基本信息-->
    <import resource="spring-shiro.xml"/>





    <aop:aspectj-autoproxy expose-proxy="true"/>

    <!--<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator"/>-->

    <!--配置MultipartFile Bean对象-->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--这里的上传文件大小由配置文件配置-->
        <!--<property name="maxUploadSize" value="2048000"/>-->
    </bean>

    <!--配置ConfigContextFactory target目录的resource映射路径-->
    <bean id="configContextFactory"
          class="com.dsm.common.utils.configContext.ConfigContextFactory">
        <property name="JAVA_RS_DIR" value="src/main/resources/"/>
    </bean>

    <!-- 配置spring 容器启动后的监听类  -->
    <!--
        注：bean配置在 spring-applicationContext.xml 配置文件中，
        启动时因为先初始化spring 容器applicationContext，然后启动spring mvc 的webapplicationContext，所以会调用两次监听方法。
        若只想调用一次，也可以配置到mvc 配置文件 spring-servlet.xml 中
    -->
    <bean class="com.dsm.common.listener.ContextRefreshedListener"/>



    <!-- 配置spring线程池 -->
    <bean id="threadPoolTaskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数，默认为1 -->
        <property name="corePoolSize" value="8" />

        <!-- 最大线程数，默认为Integer.MAX_VALUE -->
        <property name="maxPoolSize" value="20" />

        <!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE-->
        <property name="queueCapacity" value="100" />

        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="300" />

        <!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
        <property name="rejectedExecutionHandler">
            <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
            <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
            <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
            <bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
        </property>
    </bean>

</beans>

